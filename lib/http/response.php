<?php
/**
 * http response header
 *
 */
class DOResponse
{
	/** Http response body,generally generated by specific controller**/
	public $httpBody;
	/** Set Template first **/
	public function __construct()
	{
		$this->SetTemplate();
	}
	function SetHeaders(Array $headers)
	{
		if(!!$headers) array_walk($headers,array(self,'SetHeader'));
	}
	public function SetHeader($value,$option)
	{	
		if ('status' == strtolower($option))
		{
			// 'status' headers indicate an HTTP status, and need to be handled slightly differently
			header(ucfirst(strtolower($option)) . ': ' . $option, null, (int)$option);
		}
		else header(ucwords($option).":".$value);
	}
	
	public function SetBody( $body )
	{
		$this->httpBody = $body;
	}
	public function GetBody()
	{
		return $this->httpBody;
	}
	public function SetTemplate( $template = '')
	{
		$this->template = $template ? $template : DO_TEMPLATE;
	}
	
	public function GetTemplate()
	{
		return $this->template;
	}
	function NoCache($t = false)
	{
		/**
		 * 	JResponse::setHeader( 'Expires', 'Mon, 1 Jan 2001 00:00:00 GMT', true ); 				// Expires in the past
		 JResponse::setHeader( 'Last-Modified', gmdate("D, d M Y H:i:s") . ' GMT', true ); 		// Always modified
		 JResponse::setHeader( 'Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false );
		 JResponse::setHeader( 'Pragma', 'no-cache' );
		 */
		$headerArray = !$t ? array('Expires'		=> 'Mon, 1 Jan 2001 00:00:00 GMT'
								  ,'Last-Modified'	=> gmdate("D, d M Y H:i:s").' GMT'
								  ,'Cache-Control'  => 'Max-age=0,must-revalidate,no-cache,post-check=0,pre-check=0'
								  ,'Pragma'			=> 'no-cache'
		): array();
		$this->SetHeaders( $headerArray );
	}

	public function Response($httpCache = false)
	{
			/**Set cache http header**/
			if(!$httpCache)
			{
				$this->NoCache();
			}
 			/**Binding some event registered in specific controller**/
 			DOHook::TriggerEvent(
				array(
					'setHeader'		=> array()
				   ,'setTemplate'	=> array()
				)
			);
			/** Get template and prepare to display**/
			$this->SetBody(DOTemplate::LoadTemplate($this->GetTemplate()));
			/** Do we have any plugin to format this responses?**/
			$params   = array($this);
			DOHook::TriggerPlugin('system','prepareDocument',$params);
			echo $this->GetBody();
	}
}
?>