<?php
namespace Dothing\Lib\Http;
use \Dothing\Lib\Template;
use \Dothing\Lib\Hook;
/**
 * http response header
 *
 */
class Response
{
	/** Http response body,generally generated by specific controller**/
	public $httpBody;
	/** Response init **/
	public function __construct(){}
	function SetHeaders(Array $headers)
	{
		if(!!$headers) array_walk($headers,array(__CLASS__,'SetHeader'));
	}
	public function SetHeader($option,$value)
	{	
		if ('status' == strtolower($option))
		{
			// 'status' headers indicate an HTTP status, and need to be handled slightly differently
			header(ucfirst(strtolower($option)) . ': ' . $option, null, (int)$option);
		}
		else header(ucwords($option).":".$value);
	}
	
	public function SetBody( $body )
	{
		$this->httpBody = $body;
	}
	public function GetBody()
	{
		return $this->httpBody;
	}

	function NoCache($t = false)
	{
		$headerArray = !$t ? array('Expires'=> 'Mon, 1 Jan 2001 00:00:00 GMT'
					  ,'Last-Modified'		=> gmdate("D, d M Y H:i:s").' GMT'
					  ,'Cache-Control'  	=> 'Max-age=0,must-revalidate,no-cache,post-check=0,pre-check=0'
					  ,'Pragma'				=> 'no-cache'
		): array();
		$this->SetHeaders( $headerArray );
	}

	public function Response($httpCache = false)
	{
			/**Set cache http header**/
			if(!$httpCache)
			{
				$this->NoCache();
			}
			/** Get template and prepare to display**/
			ob_start();
			Template::Render();
			$this->SetBody(ob_get_clean());
			/** Do we have any plugin to format this responses?**/
			Hook::HangPlugin('afterPageRender',array($this));
			echo $this->GetBody();
	}
	
	public function __destruct(){}
}
?>
